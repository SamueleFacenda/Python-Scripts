"""

from Crypto.Util.number import getPrime, bytes_to_long

p,q = getPrime(1024), getPrime(1024)
n = p*q
e = n-p-q+4

ct = pow(bytes_to_long(flag), e, n)

print("n =", n)
print("ct =", ct)
"""
from decimal import Decimal, getcontext

n = 24115724050507199493712762654520929936774925131059332140712511092518570415243144493303620895076999217579151352098005641220254789662082249122039429593281075763473867243116281108360849599370337166659005719677959315594442881058620733458846158693288519442417046197499609227262971291046951868872967724331630614810942937943136630611188831606642913190132779641441613453701616908620598504762030351385284494949746449796839814492726493862301122366764136396286534656293577211209070238444918749907377203907983536318913476902109610454777572292382794615391425461099601480360030664640184539023460489362835787186494390857887931724561
ct = Decimal('3339891666664090373900104605188092714288004578913068591061618601501728384543458885590673450917778514384162355873893')



getcontext().prec = 1000

ct = Decimal(ct)

# radice cuba

def cube_root( A): 
    d1 = Decimal(1)
    d2 = Decimal(2)
    d3 = Decimal(3)

    x0 = (A-d1)/d3
    xn = (d2 * x0 + A / Decimal(x0*x0) ) / d3

    while xn != x0:
        x0 = xn
        xn = (d2 * x0 + A / Decimal(x0*x0) ) / d3

    return xn

sq = cube_root(ct)
sq = int(sq)
byt = sq.to_bytes((sq.bit_length() + 7) // 8, 'big')
print(byt)

